language: node_js
node_js: 4.3

branches:
  only:
    - master
    - develop
    - /^feature\/\w+/
env:
  global:
    - FUNC_NAME='Peeler'
    - ALIAS=$(if [ "$TRAVIS_BRANCH" == 'master' ]; then echo Production; else echo Beta; fi)

before_install:
  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
  - sudo apt-get update
  - sudo apt-get install cmake git pkg-config libavcodec-dev libavformat-dev libswscale-dev libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev bsdtar gcc-4.9 g++-4.9
  - (cd /usr/bin && sudo ln -sf gcc-4.9 gcc && sudo ln -sf g++-4.9 g++ && ls -l c++* gcc* g++*)
  - gcc --version && g++ --version
install:
  - mkdir tmp && cd tmp && curl -L https://github.com/Itseez/opencv/archive/2.4.12.zip | bsdtar -xvf -
  - cd opencv-* && ls -la && mkdir build && cd build
  - cmake -D CMAKE_BUILD_TYPE=RELEASE -D BUILD_SHARED_LIBS=OFF -D WITH_FFPMEG=YES -D WITH_GTK=NO -D HAVE_opencv_python=NO -D HAVE_opencv_java=NO -D CMAKE_INSTALL_PREFIX=$HOME/opencv ../
  - make && make install
  - cd $TRAVIS_BUILD_DIR
  - PKG_CONFIG_PATH=$HOME/opencv/lib/pkgconfig/ npm install opencv
  - (npm install || npm install) && export PATH="$(npm bin):$PATH"
  - sudo easy_install pip && sudo pip install awscli
  - gem install json --no-document

script:
  - gulp pack

after_success:
  - PRE=$(aws lambda get-alias --function-name $FUNC_NAME --name $ALIAS | ruby -e 'require "json"; puts JSON.load($stdin)["FunctionVersion"]')
  - aws lambda update-function-code --function-name $FUNC_NAME --zip-file fileb://$TRAVIS_BUILD_DIR/main.zip --publish | tee result
  - VERSION=$(ruby -e 'require "json"; puts JSON.load(open("result"))["Version"]')
  - if [ -z $PRE ]; then PRE=$VERSION; CU='create'; else CU='update'; fi
  - aws lambda $CU-alias --function-name $FUNC_NAME --name $ALIAS --function-version $VERSION
  - aws lambda $CU-alias --function-name $FUNC_NAME --name "${ALIAS}_pre" --function-version $PRE
  - curl -v -X POST -H "Authorization:token $GITHUB_OAUTH_TOKEN" https://api.github.com/repos/$TRAVIS_REPO_SLUG/git/refs -d "{\"ref\":\"refs/tags/deploy/$VERSION\", \"sha\":\"$(git log HEAD -n1 --format=%H)\"}"
